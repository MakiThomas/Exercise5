graph = {'A': ['B', 'C','D','E','F'],
             'B': ['A','C','D','E','F'],
             'C': ['A','B','D','E','F'],
             'D': ['A','B','C','E','F'],
             'E': ['A','B','C','D','F'],
             'F': ['A','B','C','D','E']}
def find_path(graph, start, end, path=[]):
        path = path + [start]
        if start == end:
            return path
        if not graph.has_key(start):
            return None
        for node in graph[start]:
            if node not in path:
                newpath = find_path(graph, node, end, path)
                if newpath: return newpath
        return None
print graph
print find_path(graph,'A','F')
def find_all_paths(graph, start, end, path=[]):
        path = path + [start]
        if start == end:
            return [path]
        if not graph.has_key(start):
            return []
        paths = []
        for node in graph[start]:
            if node not in path:
                newpaths = find_all_paths(graph, node, end, path)
                for newpath in newpaths:
                    paths.append(newpath)
        return paths
find_all_paths(graph, 'A', 'D')
